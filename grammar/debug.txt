/*Drone chassis reset (PROMPT)*/
Scene.my.droneChassis = []; Scene.my.droneMass = 0; Scene.my.droneThrusters = [0, 0]; Scene.my.altitudeIndicator = 0;  Scene.my.horizontalIndicator = 0;Scene.my.droneThrusterAngle = 0; Scene.my.droneAltitudeOffset = 0;
/*Drone thruster single object (PostStep)*/
postStep = (e)=>{
	angle = Scene.my.droneThrusterAngle / (180 / Math.PI);
	/*targetRotation := 0;
	delay := 15;
	(Keys.isDown ("Left")) ? {
		targetRotation = targetRotation + 15;
		delay = 30;
	} : {
		(Keys.isDown ("Right")) ? {
			targetRotation = targetRotation - 15;
			delay = 30;
		} : {
			
		};
	};
	
	targetRotation = targetRotation / (180 / Math.PI);
	diff := targetRotation - angle;
	offset = (delay / (180 / Math.PI)) / Sim.frequency;
	diff = (diff > offset ? offset : (diff < -offset ? -offset : diff));
	angle = angle + diff;*/
};
/*Drone main frame (POST-STEP)*/
postStep = (e)=>{
	temp := 0;
	for (String.length (_altitudeOffset), (n) => {
		(_altitudeOffset(n) > temp) ? {
			temp = _altitudeOffset(n);
		} : { };
	});
	
	Scene.my.droneAltitudeOffset = temp;
};
/*Drone chassis single object (UPDATE)*/
update = (e)=>{
	/* Check if there is enough space to save object's information */
	(String.length (Scene.my.droneChassis) == _chassisIndex) ? {
		Scene.my.droneChassis = math.vec.addList (Scene.my.droneChassis, [-1]);
	} : { /* Ignore */ };
	
	/* Update object's information */
	/*(Scene.my.droneChassis(_chassisIndex) == -1) ? {*/
	mass := (size(0) * size(1) * density);
	Scene.my.droneChassis = Scene.my.setv (Scene.my.droneChassis, _chassisIndex, [mass, entityId]);
};
/*CPU*/
_goToPosition = (indicators, droneFrame, coordinates, threshold)=>{
	(_droneStateTimer == 0) ? {
		_targetHorizontal = coordinates(0);
		_targetAltitude = coordinates(1);
		(indicators(0)).pos = resetPosition;		
		(indicators(1)).pos = resetPosition;
				
		_droneStateTimer = Sim.time;
	} : {};
	
	distance := Math.vec.dist (coordinates, droneFrame.pos);
	droneFrame.text = distance + "";
	(distance <= threshold) ? {
		_droneStateTimer = 0;
		true;
	} : {
		false;
	};
};
_checkSafeHouse = (droneFrame, indicators)=>{
	result := false;
	
	safeHouseDoorPos := [-16.125, 2.21875];
	safeHouseInsidePos := [-17.9375, droneFrame.pos(1)];
	
	distanceToSafeHouseDoor := Math.vec.dist (safeHouseDoorPos, droneFrame.pos);
	distanceToSafeHouseInside := Math.vec.dist (safeHouseInsidePos, droneFrame.pos);
	
	droneStopped := droneFrame.vel(0) < 0 ? (droneFrame.vel(0) > -0.011301892) : (droneFrame.vel(0) < 0.011301892);
	
	(droneFrame.pos(0) <= safeHouseDoorPos(0) || _droneState > 0) ? {
		/* We are on the inside */
		((distanceToSafeHouseInside <= 0.002 && droneStopped) || _droneState > 0) ? {
			[
				{ /* State 0 */					
					(_droneStateTimer == 0) ? {
						/* Raise the piston */
						Scene.my.safeHousePistonForce = 30;
						_droneStateTimer = Sim.time;
					} : {
						/* Check the passed time */
						(Sim.time - _droneStateTimer >= 3) ? {
							/* Skips to the next state */
							_droneState = 1;
							_droneStateTimer = 0;
						} : {};
					};					
				}, 
				{ /* State 1 */
					(_droneStateTimer < 2) ? {
						/* Spawn the packages */
						Scene.addBox ({
							density := 2.0 + (rand.uniform01 * 2 - 1);
							collideSet := 257;
							friction := +inf;
							collideWater := true;
							pos := [[-18.3125, -17.5625](_droneStateTimer), 3.7502458];
							size := [0.25, 0.25];
							text := { Math.toInt (density * area) + "Kg" };
						});
						_droneStateTimer = _droneStateTimer + 1;
					} : {
						/* Skips to the next state */
						_droneState = 2;
						_droneStateTimer = Sim.time;						
						/* Lower the piston */
						Scene.my.safeHousePistonForce = 0;
					};
				}, 
				{ /* State 2 */					
					/* Check the passed time */
					(Sim.time - _droneStateTimer >= 3) ? {						
						/* Skips to the next state */
						_droneState = 3;
						_droneStateTimer = 0;
					} : {};
				},
				{ /* State 3 */
					_goToPosition (indicators, droneFrame, [-10.0, 2.125], 0.25) ? { _droneState = 4; } : {};
				},
				{ /* State 4 */
					_goToPosition (indicators, droneFrame, [7.0, 5.0], 0.25) ? { _droneState = 5; } : {};
				},
				{ /* State 5 */
					_goToPosition (indicators, droneFrame, [7.0, 1.0], 0.25) ? { _droneState = 6; } : {};
				},
				{ /* State 6 */
					_goToPosition (indicators, droneFrame, [2.4375, 1.125], 0.25) ? { _droneState = 7; } : {};
				},
				{ /* State 7 */
					_goToPosition (indicators, droneFrame, [2.4375, 2.375], 0.25) ? { _droneState = 8; } : {};
				},
				{ /* State 8 */
					_goToPosition (indicators, droneFrame, [-0.5, 1.25], 0.25) ? { _droneState = 0; } : {};
				}
			] (_droneState) ();
			
			result = true;
		} : {
			/* If we are next to the door */
			(distanceToSafeHouseDoor <= 0.75 && droneFrame.vel(0) < 0) ? {
				/* Directs the drone to the piston coordinates */
				_targetHorizontal = safeHouseInsidePos(0);
				_targetAltitude = safeHouseInsidePos(1);	
				(indicators(0)).pos = safeHouseInsidePos;		
				(indicators(1)).pos = safeHouseInsidePos;
				
				result = true;
			} : {};
		};
	} : {};
	
	result
};
/*CPU (POST-STEP)*/
postStep = (e)=>{
	/* Get the fifth (Main frame of the drone) object */
	droneFrame := Scene.entityById (Scene.my.droneChassis(4)(1));
	altitudeIndicatorBox := Scene.entityByGeomId (Scene.my.altitudeIndicator);
	horizontalIndicatorBox := Scene.entityByGeomId (Scene.my.horizontalIndicator);	
	
	(!_checkSafeHouse (droneFrame, [horizontalIndicatorBox, altitudeIndicatorBox])) ? {
		(Keys.isDown ("0")) ? {
			_targetHorizontal = App.mousePos(0);
			_targetAltitude = App.mousePos(1);
		} : {
			/* Altitude controls */
			(Keys.isDown ("Up")) ? {
				_targetAltitude = _targetAltitude + 1 / Sim.frequency;
			} : {
				(Keys.isDown ("Down")) ? {
					_targetAltitude = _targetAltitude - 1 / Sim.frequency;
				} : {};
			};

			posY = altitudeIndicatorBox.pos(1);
			diff = _targetAltitude - posY;
			offset = 1.25 / Sim.frequency;
			diff = (diff > offset ? offset : (diff < (-offset) ? (-offset) : diff));
			altitudeIndicatorBox.pos = [droneFrame.pos(0), posY + diff];
			
			/* Horizontal controls */		
			(Keys.isDown ("Left")) ? {
				_targetHorizontal = _targetHorizontal - 1.25 / Sim.frequency;
			} : {
				(Keys.isDown ("Right")) ? {
					_targetHorizontal = _targetHorizontal + 1.25 / Sim.frequency;
				} : {};
			};
			
			sizeY = altitudeIndicatorBox.size (1);
			horizontalIndicatorBox.pos = [_targetHorizontal, _targetAltitude - sizeY];
		}
	} : { /* IGNORE */ };	
};
/*CPU (UPDATE)*/
update = (e)=>{
	P := 0;
	D := 0;
	PID := 0;
	limit := 0;
	leftThrusterGain := 0;
	rightThrusterGain := 0;
	
	/* Calculate the drone chassis mass */
	temp := 0;
	for (String.length (Scene.my.droneChassis), (n) => {
		temp = temp + Scene.my.droneChassis(n)(0);		
	});
	Scene.my.droneMass = temp;
	
	/* Get the fifth (Main frame of the drone) object */
	droneFrame := Scene.entityById (Scene.my.droneChassis(4)(1));
	
	/* Horizontal PID controller */
	droneHorizontal := droneFrame.pos(0) + (droneFrame.vel(0) * 95 / Sim.frequency);
    horizontalError := (_targetHorizontal - droneHorizontal);
    P = horizontalError * 15.75;
    _horizontalErrorDecay = _horizontalErrorDecay + (horizontalError * 20.4) / Sim.frequency;/* 7.4 */
    D = (_lastHorizontal - droneHorizontal) * 1.75;/* 0.75 */
	_lastHorizontal = droneHorizontal;
	PID = (P + _horizontalErrorDecay + D);
	limit = 27;
	PID = PID > limit ? limit : (PID < -limit ? -limit : PID); 
	Scene.my.droneThrusterAngle = -PID;
	
	/* Altitude PID controller */
	droneAltitude := droneFrame.pos(1) + (droneFrame.vel(1) / Sim.frequency * 50);
	tempTargetAltitude := Scene.my.droneAltitudeOffset > _targetAltitude ? Scene.my.droneAltitudeOffset : _targetAltitude;
	altitudeError := (tempTargetAltitude - droneAltitude);
	P = altitudeError * 8.5;
	_altitudeErrorDecay = _altitudeErrorDecay + (altitudeError * 0.0002) / Sim.frequency;	
	D = (_lastAltitude - droneAltitude) * 8.9 / Sim.frequency;
	_lastAltitude = droneAltitude;
	PID = (P + _altitudeErrorDecay + D);
	limit = 15;
	PID = PID > limit ? limit : (PID < -limit ? -limit : PID); 
	leftThrusterGain = leftThrusterGain + PID;
	rightThrusterGain = rightThrusterGain + PID;
	
	/* Angle PID controller */
	droneAngle := droneFrame.angle * (180 / Math.PI) + (droneFrame.angVel / Sim.frequency * 2) * (180 / Math.PI);
	angleError := (_targetAngle - droneAngle);
	P = angleError * 1.0;
    _angleErrorDecay = _angleErrorDecay + (angleError * 1.5) / Sim.frequency;
    D = (_lastAngle - droneAngle) * 15.7 / Sim.frequency;
	_lastAngle = droneAngle;
	PID = (P + _angleErrorDecay + D);
	limit = 7;
	PID = PID > limit ? limit : (PID < -limit ? -limit : PID);
	leftThrusterGain = leftThrusterGain - PID;
	rightThrusterGain = rightThrusterGain + PID;	
	
	/* Calculate the drone's thrusters forces */
	individualThrusterForce := (Scene.my.droneMass * Sim.gravityStrength) / 2;
	Scene.my.droneThrusters = [
		individualThrusterForce + leftThrusterGain,
		individualThrusterForce + rightThrusterGain
	];
};
/*LASER (ON-LASER-HIT)*/
onLaserHit = (e)=>{
	droneFrame := Scene.entityByGeomId ((readable (owner)).geom);
	distance := Math.vec.dist (pos, e.pos);
	(distance <= droneFrame._distanceThreshold) ? {
		droneFrame._altitudeOffset = Scene.my.setv (droneFrame._altitudeOffset, _index, e.pos(1) + droneFrame._distanceThreshold);
	} : {
		droneFrame._altitudeOffset = Scene.my.setv (droneFrame._altitudeOffset, _index, 0);
	}
}
/*LASER (POST-STEP)*/
postStep = (e)=>{
	
	
	degrees := Math.toInt (rotation * (180 / Math.PI));
	(degrees <= -180 && _direction == -1) ? {
		_direction = 1;
	} : {
		(degrees >= 0 && _direction == 1) ? {
			_direction = -1;
		} : {
			rotation = rotation + _direction * (720 / (180 / Math.PI) / Sim.frequency);
		}
	}
};
